// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govDraftDepartmentFieldNames          = builder.RawFieldNames(&GovDraftDepartment{})
	govDraftDepartmentRows                = strings.Join(govDraftDepartmentFieldNames, ",")
	govDraftDepartmentRowsExpectAutoSet   = strings.Join(stringx.Remove(govDraftDepartmentFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	govDraftDepartmentRowsWithPlaceHolder = strings.Join(stringx.Remove(govDraftDepartmentFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"
)

type (
	govDraftDepartmentModel interface {
		Insert(ctx context.Context, data *GovDraftDepartment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovDraftDepartment, error)
		Update(ctx context.Context, data *GovDraftDepartment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovDraftDepartmentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovDraftDepartment struct {
		Id             int64        `db:"id"`
		DraftId        int64        `db:"draft_id"`        // 草稿id
		DepartmentId   int64        `db:"department_id"`   // 部门id
		DepartmentName string       `db:"department_name"` // 部门名称
		CreatedAt      sql.NullTime `db:"created_at"`
		UpdatedAt      sql.NullTime `db:"updated_at"`
	}
)

func newGovDraftDepartmentModel(conn sqlx.SqlConn) *defaultGovDraftDepartmentModel {
	return &defaultGovDraftDepartmentModel{
		conn:  conn,
		table: "`gov_draft_department`",
	}
}

func (m *defaultGovDraftDepartmentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovDraftDepartmentModel) FindOne(ctx context.Context, id int64) (*GovDraftDepartment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govDraftDepartmentRows, m.table)
	var resp GovDraftDepartment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovDraftDepartmentModel) Insert(ctx context.Context, data *GovDraftDepartment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, govDraftDepartmentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.DraftId, data.DepartmentId, data.DepartmentName)
	return ret, err
}

func (m *defaultGovDraftDepartmentModel) Update(ctx context.Context, data *GovDraftDepartment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govDraftDepartmentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.DraftId, data.DepartmentId, data.DepartmentName, data.Id)
	return err
}

func (m *defaultGovDraftDepartmentModel) tableName() string {
	return m.table
}
