// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govServiceManagementFieldNames          = builder.RawFieldNames(&GovServiceManagement{})
	govServiceManagementRows                = strings.Join(govServiceManagementFieldNames, ",")
	govServiceManagementRowsExpectAutoSet   = strings.Join(stringx.Remove(govServiceManagementFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	govServiceManagementRowsWithPlaceHolder = strings.Join(stringx.Remove(govServiceManagementFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"
)

type (
	govServiceManagementModel interface {
		Insert(ctx context.Context, data *GovServiceManagement) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovServiceManagement, error)
		Update(ctx context.Context, data *GovServiceManagement) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovServiceManagementModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovServiceManagement struct {
		Id                        int64          `db:"id"`
		Pid                       int64          `db:"pid"`                          // 父id
		Name                      sql.NullString `db:"name"`                         // 服务名字
		CategoryId                sql.NullInt64  `db:"category_id"`                  // 服务类目id
		CategoryName              sql.NullString `db:"category_name"`                // 服务类目名称
		RegionClassifyId          sql.NullInt64  `db:"region_classify_id"`           // 地区服务分类id
		DepartmentId              sql.NullString `db:"department_id"`                // 所属部门id
		ProvinceId                int64          `db:"province_id"`                  // 省
		CityId                    int64          `db:"city_id"`                      // 市
		CountyId                  int64          `db:"county_id"`                    // 县
		VillageId                 int64          `db:"village_id"`                   // 村
		Source                    sql.NullString `db:"source"`                       // 数据来源
		Type                      sql.NullInt64  `db:"type"`                         // 分类归属：1个人；2法人
		UseLevel                  sql.NullInt64  `db:"use_level"`                    // 服务等级：1省；2市；3县区；4乡镇; 5村
		ReleaseStatus             int64          `db:"release_status"`               // 发布状态：1发布；2待发布
		Channel                   int64          `db:"channel"`                      // 发布渠道：1自助机系统；2数享生活app 3全部
		ContentEdited             sql.NullString `db:"content_edited"`               // 内容详情
		CreatedAt                 sql.NullTime   `db:"created_at"`                   // 添加时间
		UpdatedAt                 sql.NullTime   `db:"updated_at"`                   // 修改时间
		DeletedAt                 sql.NullTime   `db:"deleted_at"`                   // 删除时间
		PublishProvinceId         int64          `db:"publish_province_id"`          // 发布服务 省
		PublishCityId             int64          `db:"publish_city_id"`              // 发布服务 市
		PublishCountyId           int64          `db:"publish_county_id"`            // 发布服务 县
		PublishVillageId          int64          `db:"publish_village_id"`           // 发布服务 村镇
		PublishUseLevel           int64          `db:"publish_use_level"`            // 服务等级：1省；2市；3县区；4乡镇; 5村
		PublishAreaName           string         `db:"publish_area_name"`            // 发布地区名称
		PublishRegionClassifyId   sql.NullString `db:"publish_region_classify_id"`   // 发布服务 地区服务分类id
		PublishRegionClassifyName string         `db:"publish_region_classify_name"` // 发布服务 地区服务分类名称
		DraftId                   sql.NullInt64  `db:"draft_id"`                     // 草稿id
		PublishType               int64          `db:"publish_type"`                 // 发布--分类归属：1个人服务；2法人服务
		PublishChannel            sql.NullInt64  `db:"publish_channel"`              // 发布--发布渠道：1自助机系统；2数享生活app 3全部
		ManagerUpdatedAt          sql.NullTime   `db:"manager_updated_at"`           // 服务更新时间
	}
)

func newGovServiceManagementModel(conn sqlx.SqlConn) *defaultGovServiceManagementModel {
	return &defaultGovServiceManagementModel{
		conn:  conn,
		table: "`gov_service_management`",
	}
}

func (m *defaultGovServiceManagementModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovServiceManagementModel) FindOne(ctx context.Context, id int64) (*GovServiceManagement, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govServiceManagementRows, m.table)
	var resp GovServiceManagement
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovServiceManagementModel) Insert(ctx context.Context, data *GovServiceManagement) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, govServiceManagementRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Pid, data.Name, data.CategoryId, data.CategoryName, data.RegionClassifyId, data.DepartmentId, data.ProvinceId, data.CityId, data.CountyId, data.VillageId, data.Source, data.Type, data.UseLevel, data.ReleaseStatus, data.Channel, data.ContentEdited, data.DeletedAt, data.PublishProvinceId, data.PublishCityId, data.PublishCountyId, data.PublishVillageId, data.PublishUseLevel, data.PublishAreaName, data.PublishRegionClassifyId, data.PublishRegionClassifyName, data.DraftId, data.PublishType, data.PublishChannel, data.ManagerUpdatedAt)
	return ret, err
}

func (m *defaultGovServiceManagementModel) Update(ctx context.Context, data *GovServiceManagement) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govServiceManagementRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Pid, data.Name, data.CategoryId, data.CategoryName, data.RegionClassifyId, data.DepartmentId, data.ProvinceId, data.CityId, data.CountyId, data.VillageId, data.Source, data.Type, data.UseLevel, data.ReleaseStatus, data.Channel, data.ContentEdited, data.DeletedAt, data.PublishProvinceId, data.PublishCityId, data.PublishCountyId, data.PublishVillageId, data.PublishUseLevel, data.PublishAreaName, data.PublishRegionClassifyId, data.PublishRegionClassifyName, data.DraftId, data.PublishType, data.PublishChannel, data.ManagerUpdatedAt, data.Id)
	return err
}

func (m *defaultGovServiceManagementModel) tableName() string {
	return m.table
}
