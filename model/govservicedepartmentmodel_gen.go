// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govServiceDepartmentFieldNames          = builder.RawFieldNames(&GovServiceDepartment{})
	govServiceDepartmentRows                = strings.Join(govServiceDepartmentFieldNames, ",")
	govServiceDepartmentRowsExpectAutoSet   = strings.Join(stringx.Remove(govServiceDepartmentFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	govServiceDepartmentRowsWithPlaceHolder = strings.Join(stringx.Remove(govServiceDepartmentFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	govServiceDepartmentModel interface {
		Insert(ctx context.Context, data *GovServiceDepartment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovServiceDepartment, error)
		Update(ctx context.Context, data *GovServiceDepartment) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovServiceDepartmentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovServiceDepartment struct {
		Id             int64        `db:"id"`
		ManagementId   int64        `db:"management_id"`   // 服务管理id
		DepartmentId   int64        `db:"department_id"`   // 部门id
		DepartmentName string       `db:"department_name"` // 部门名称
		UpdatedAt      sql.NullTime `db:"updated_at"`
		CreatedAt      sql.NullTime `db:"created_at"`
	}
)

func newGovServiceDepartmentModel(conn sqlx.SqlConn) *defaultGovServiceDepartmentModel {
	return &defaultGovServiceDepartmentModel{
		conn:  conn,
		table: "`gov_service_department`",
	}
}

func (m *defaultGovServiceDepartmentModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovServiceDepartmentModel) FindOne(ctx context.Context, id int64) (*GovServiceDepartment, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govServiceDepartmentRows, m.table)
	var resp GovServiceDepartment
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovServiceDepartmentModel) Insert(ctx context.Context, data *GovServiceDepartment) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?)", m.table, govServiceDepartmentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ManagementId, data.DepartmentId, data.DepartmentName)
	return ret, err
}

func (m *defaultGovServiceDepartmentModel) Update(ctx context.Context, data *GovServiceDepartment) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govServiceDepartmentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ManagementId, data.DepartmentId, data.DepartmentName, data.Id)
	return err
}

func (m *defaultGovServiceDepartmentModel) tableName() string {
	return m.table
}
