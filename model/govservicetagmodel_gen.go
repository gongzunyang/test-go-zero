// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govServiceTagFieldNames          = builder.RawFieldNames(&GovServiceTag{})
	govServiceTagRows                = strings.Join(govServiceTagFieldNames, ",")
	govServiceTagRowsExpectAutoSet   = strings.Join(stringx.Remove(govServiceTagFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	govServiceTagRowsWithPlaceHolder = strings.Join(stringx.Remove(govServiceTagFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"
)

type (
	govServiceTagModel interface {
		Insert(ctx context.Context, data *GovServiceTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovServiceTag, error)
		Update(ctx context.Context, data *GovServiceTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovServiceTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovServiceTag struct {
		Id        int64          `db:"id"`
		ServiceId int64          `db:"service_id"` // 服务id
		TagId     int64          `db:"tag_id"`     // 标签id
		TagValue  sql.NullString `db:"tag_value"`  // 标签值
		AgeStart  int64          `db:"age_start"`  // 年龄开始时间(区间查询)
		AgeEnd    int64          `db:"age_end"`    // 年龄结束时间(区间查询)
		CreatedAt sql.NullString `db:"created_at"` // 增加时间
		UpdatedAt sql.NullString `db:"updated_at"` // 更新时间
	}
)

func newGovServiceTagModel(conn sqlx.SqlConn) *defaultGovServiceTagModel {
	return &defaultGovServiceTagModel{
		conn:  conn,
		table: "`gov_service_tag`",
	}
}

func (m *defaultGovServiceTagModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovServiceTagModel) FindOne(ctx context.Context, id int64) (*GovServiceTag, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govServiceTagRows, m.table)
	var resp GovServiceTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovServiceTagModel) Insert(ctx context.Context, data *GovServiceTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, govServiceTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ServiceId, data.TagId, data.TagValue, data.AgeStart, data.AgeEnd)
	return ret, err
}

func (m *defaultGovServiceTagModel) Update(ctx context.Context, data *GovServiceTag) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govServiceTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ServiceId, data.TagId, data.TagValue, data.AgeStart, data.AgeEnd, data.Id)
	return err
}

func (m *defaultGovServiceTagModel) tableName() string {
	return m.table
}
