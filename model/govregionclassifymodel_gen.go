// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govRegionClassifyFieldNames          = builder.RawFieldNames(&GovRegionClassify{})
	govRegionClassifyRows                = strings.Join(govRegionClassifyFieldNames, ",")
	govRegionClassifyRowsExpectAutoSet   = strings.Join(stringx.Remove(govRegionClassifyFieldNames, "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	govRegionClassifyRowsWithPlaceHolder = strings.Join(stringx.Remove(govRegionClassifyFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"
)

type (
	govRegionClassifyModel interface {
		Insert(ctx context.Context, data *GovRegionClassify) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovRegionClassify, error)
		Update(ctx context.Context, data *GovRegionClassify) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovRegionClassifyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovRegionClassify struct {
		Id         int64          `db:"id"`
		Pid        int64          `db:"pid"`         // 父id
		Uid        sql.NullInt64  `db:"uid"`         // 创建人uid
		ProvinceId sql.NullInt64  `db:"province_id"` // 省id
		Name       sql.NullString `db:"name"`        // 分类名字
		Type       int64          `db:"type"`        // 分类归属:1：个人；2：法人；
		Status     int64          `db:"status"`      // 状态  1启用，2禁用
		Level      sql.NullInt64  `db:"level"`       // 级别：1一级；2二级
		Rank       int64          `db:"rank"`        // 排序
		Remark     sql.NullString `db:"remark"`      // 备注
		CreatedAt  sql.NullTime   `db:"created_at"`
		UpdatedAt  sql.NullTime   `db:"updated_at"`
		DeletedAt  sql.NullTime   `db:"deleted_at"`
	}
)

func newGovRegionClassifyModel(conn sqlx.SqlConn) *defaultGovRegionClassifyModel {
	return &defaultGovRegionClassifyModel{
		conn:  conn,
		table: "`gov_region_classify`",
	}
}

func (m *defaultGovRegionClassifyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovRegionClassifyModel) FindOne(ctx context.Context, id int64) (*GovRegionClassify, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govRegionClassifyRows, m.table)
	var resp GovRegionClassify
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovRegionClassifyModel) Insert(ctx context.Context, data *GovRegionClassify) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, govRegionClassifyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Pid, data.Uid, data.ProvinceId, data.Name, data.Type, data.Status, data.Level, data.Rank, data.Remark, data.DeletedAt)
	return ret, err
}

func (m *defaultGovRegionClassifyModel) Update(ctx context.Context, data *GovRegionClassify) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govRegionClassifyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Pid, data.Uid, data.ProvinceId, data.Name, data.Type, data.Status, data.Level, data.Rank, data.Remark, data.DeletedAt, data.Id)
	return err
}

func (m *defaultGovRegionClassifyModel) tableName() string {
	return m.table
}
