// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govDraftMasterFieldNames          = builder.RawFieldNames(&GovDraftMaster{})
	govDraftMasterRows                = strings.Join(govDraftMasterFieldNames, ",")
	govDraftMasterRowsExpectAutoSet   = strings.Join(stringx.Remove(govDraftMasterFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), ",")
	govDraftMasterRowsWithPlaceHolder = strings.Join(stringx.Remove(govDraftMasterFieldNames, "`id`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`"), "=?,") + "=?"
)

type (
	govDraftMasterModel interface {
		Insert(ctx context.Context, data *GovDraftMaster) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovDraftMaster, error)
		Update(ctx context.Context, data *GovDraftMaster) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovDraftMasterModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovDraftMaster struct {
		Id                  int64          `db:"id"`
		Pid                 int64          `db:"pid"`                   // 父id
		SubArticleNum       int64          `db:"sub_article_num"`       // 子级文章数量
		ArticleSign         string         `db:"article_sign"`          // 文章唯一标识(以rowGuid为准)
		Name                string         `db:"name"`                  // 服务名字
		HashStr             string         `db:"hash_str"`              // 原内容hash值，用于判断是否有修改，如果有，则重新爬取一次
		DeptName            sql.NullString `db:"dept_name"`             // 实施主体
		CategoryId          int64          `db:"category_id"`           // 服务类目id
		RegionClassifyId    int64          `db:"region_classify_id"`    // 地区分类id
		DepartmentId        sql.NullString `db:"department_id"`         // 所属部门id
		ProvinceId          int64          `db:"province_id"`           // 省
		CityId              int64          `db:"city_id"`               // 市
		CountyId            int64          `db:"county_id"`             // 县
		VillageId           int64          `db:"village_id"`            // 村
		Source              sql.NullString `db:"source"`                // 数据来源
		Type                int64          `db:"type"`                  // 分类归属：1个人；2法人
		UseLevel            int64          `db:"use_level"`             // 服务等级：1省；2市；3县区；4乡镇; 5村
		Status              sql.NullInt64  `db:"status"`                // 文章状态：1 草稿；2收录
		AreaId              sql.NullInt64  `db:"area_id"`               // 地区id(来自网站)
		Withdraw            int64          `db:"withdraw"`              // 是否撤稿: 0正常|1撤稿
		IsCrawling          sql.NullInt64  `db:"is_crawling"`           // 是否正在爬取数据
		Channel             sql.NullInt64  `db:"channel"`               // 针对渠道 1自助机系统；2数享生活app 3.全部
		ContentOriginal     string         `db:"content_original"`      // 爬取的原始内容
		ContentEdited       sql.NullString `db:"content_edited"`        // 修改后的内容
		HasChanged          sql.NullInt64  `db:"has_changed"`           // 爬取的内容是否有修改，0:无|1有|2撤稿
		CreatedAt           sql.NullTime   `db:"created_at"`            // 添加时间
		UpdatedAt           sql.NullTime   `db:"updated_at"`            // 修改时间
		IsInclude           int64          `db:"is_include"`            // 草稿内容是否被收录 1.已收录 2.未收录
		IsChange            int64          `db:"is_change"`             // 草稿内容是否有修改 1.已修改 2.未修改
		ServiceManagementId sql.NullInt64  `db:"service_management_id"` // 服务id
		TagInfo             sql.NullString `db:"tag_info"`              // 标签信息
	}
)

func newGovDraftMasterModel(conn sqlx.SqlConn) *defaultGovDraftMasterModel {
	return &defaultGovDraftMasterModel{
		conn:  conn,
		table: "`gov_draft_master`",
	}
}

func (m *defaultGovDraftMasterModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovDraftMasterModel) FindOne(ctx context.Context, id int64) (*GovDraftMaster, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govDraftMasterRows, m.table)
	var resp GovDraftMaster
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovDraftMasterModel) Insert(ctx context.Context, data *GovDraftMaster) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, govDraftMasterRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Pid, data.SubArticleNum, data.ArticleSign, data.Name, data.HashStr, data.DeptName, data.CategoryId, data.RegionClassifyId, data.DepartmentId, data.ProvinceId, data.CityId, data.CountyId, data.VillageId, data.Source, data.Type, data.UseLevel, data.Status, data.AreaId, data.Withdraw, data.IsCrawling, data.Channel, data.ContentOriginal, data.ContentEdited, data.HasChanged, data.IsInclude, data.IsChange, data.ServiceManagementId, data.TagInfo)
	return ret, err
}

func (m *defaultGovDraftMasterModel) Update(ctx context.Context, data *GovDraftMaster) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govDraftMasterRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Pid, data.SubArticleNum, data.ArticleSign, data.Name, data.HashStr, data.DeptName, data.CategoryId, data.RegionClassifyId, data.DepartmentId, data.ProvinceId, data.CityId, data.CountyId, data.VillageId, data.Source, data.Type, data.UseLevel, data.Status, data.AreaId, data.Withdraw, data.IsCrawling, data.Channel, data.ContentOriginal, data.ContentEdited, data.HasChanged, data.IsInclude, data.IsChange, data.ServiceManagementId, data.TagInfo, data.Id)
	return err
}

func (m *defaultGovDraftMasterModel) tableName() string {
	return m.table
}
