// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govAttachmentsFieldNames          = builder.RawFieldNames(&GovAttachments{})
	govAttachmentsRows                = strings.Join(govAttachmentsFieldNames, ",")
	govAttachmentsRowsExpectAutoSet   = strings.Join(stringx.Remove(govAttachmentsFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	govAttachmentsRowsWithPlaceHolder = strings.Join(stringx.Remove(govAttachmentsFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"
)

type (
	govAttachmentsModel interface {
		Insert(ctx context.Context, data *GovAttachments) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovAttachments, error)
		Update(ctx context.Context, data *GovAttachments) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovAttachmentsModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovAttachments struct {
		Id          int64          `db:"id"`
		FileUrl     string         `db:"file_url"`    // cos链接
		ArticleUrl  string         `db:"article_url"` // 文章链接
		DocId       sql.NullString `db:"doc_id"`      // 范本下载、样表下载的doc_id
		DocName     sql.NullString `db:"doc_name"`
		DocExt      sql.NullString `db:"doc_ext"`
		OriginalUrl sql.NullString `db:"original_url"` // 原文件链接
		CreatedTime time.Time      `db:"created_time"`
		UpdatedTime time.Time      `db:"updated_time"`
	}
)

func newGovAttachmentsModel(conn sqlx.SqlConn) *defaultGovAttachmentsModel {
	return &defaultGovAttachmentsModel{
		conn:  conn,
		table: "`gov_attachments`",
	}
}

func (m *defaultGovAttachmentsModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovAttachmentsModel) FindOne(ctx context.Context, id int64) (*GovAttachments, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govAttachmentsRows, m.table)
	var resp GovAttachments
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovAttachmentsModel) Insert(ctx context.Context, data *GovAttachments) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, govAttachmentsRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.FileUrl, data.ArticleUrl, data.DocId, data.DocName, data.DocExt, data.OriginalUrl, data.CreatedTime, data.UpdatedTime)
	return ret, err
}

func (m *defaultGovAttachmentsModel) Update(ctx context.Context, data *GovAttachments) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govAttachmentsRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.FileUrl, data.ArticleUrl, data.DocId, data.DocName, data.DocExt, data.OriginalUrl, data.CreatedTime, data.UpdatedTime, data.Id)
	return err
}

func (m *defaultGovAttachmentsModel) tableName() string {
	return m.table
}
