// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govWeibanjuFieldNames          = builder.RawFieldNames(&GovWeibanju{})
	govWeibanjuRows                = strings.Join(govWeibanjuFieldNames, ",")
	govWeibanjuRowsExpectAutoSet   = strings.Join(stringx.Remove(govWeibanjuFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	govWeibanjuRowsWithPlaceHolder = strings.Join(stringx.Remove(govWeibanjuFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	govWeibanjuModel interface {
		Insert(ctx context.Context, data *GovWeibanju) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovWeibanju, error)
		Update(ctx context.Context, data *GovWeibanju) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovWeibanjuModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovWeibanju struct {
		Id         int64          `db:"id"`
		Uid        sql.NullInt64  `db:"uid"`         // 创建人id
		ProvinceId sql.NullInt64  `db:"province_id"` // 省id
		CityId     sql.NullInt64  `db:"city_id"`     // 市id
		CountyId   sql.NullInt64  `db:"county_id"`   // 县区id
		VillageId  sql.NullInt64  `db:"village_id"`  // 乡镇街道
		Name       sql.NullString `db:"name"`        // 名称
		Level      sql.NullInt64  `db:"level"`       // 级别：0：省；1：市；2：县区；3：乡镇街道
		CreatedAt  sql.NullTime   `db:"created_at"`
		UpdatedAt  sql.NullTime   `db:"updated_at"`
		DeletedAt  sql.NullTime   `db:"deleted_at"`
	}
)

func newGovWeibanjuModel(conn sqlx.SqlConn) *defaultGovWeibanjuModel {
	return &defaultGovWeibanjuModel{
		conn:  conn,
		table: "`gov_weibanju`",
	}
}

func (m *defaultGovWeibanjuModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovWeibanjuModel) FindOne(ctx context.Context, id int64) (*GovWeibanju, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govWeibanjuRows, m.table)
	var resp GovWeibanju
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovWeibanjuModel) Insert(ctx context.Context, data *GovWeibanju) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, govWeibanjuRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Uid, data.ProvinceId, data.CityId, data.CountyId, data.VillageId, data.Name, data.Level, data.DeletedAt)
	return ret, err
}

func (m *defaultGovWeibanjuModel) Update(ctx context.Context, data *GovWeibanju) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govWeibanjuRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Uid, data.ProvinceId, data.CityId, data.CountyId, data.VillageId, data.Name, data.Level, data.DeletedAt, data.Id)
	return err
}

func (m *defaultGovWeibanjuModel) tableName() string {
	return m.table
}
