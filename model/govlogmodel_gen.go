// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govLogFieldNames          = builder.RawFieldNames(&GovLog{})
	govLogRows                = strings.Join(govLogFieldNames, ",")
	govLogRowsExpectAutoSet   = strings.Join(stringx.Remove(govLogFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	govLogRowsWithPlaceHolder = strings.Join(stringx.Remove(govLogFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	govLogModel interface {
		Insert(ctx context.Context, data *GovLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovLog, error)
		Update(ctx context.Context, data *GovLog) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovLogModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovLog struct {
		Id        int64          `db:"id"`
		RelatedId int64          `db:"related_id"`
		Operation int64          `db:"operation"`  // 操作类型: 1新增| 2修改| 3删除| 4保存| 5收录| 6发布| 7撤销
		Module    int64          `db:"module"`     // 操作: 1服务类目|2地区服务分类|3地区委办局|4草稿|5服务管理
		Pid       string         `db:"pid"`        // 操作用户pid
		Username  string         `db:"username"`   // 操作用户姓名
		RealName  sql.NullString `db:"real_name"`  // 真实姓名
		ChgLog    string         `db:"chg_log"`    // 修改内容|操作说明
		CreatedAt sql.NullTime   `db:"created_at"` // 操作时间
		UpdatedAt sql.NullTime   `db:"updated_at"` // 修改时间
	}
)

func newGovLogModel(conn sqlx.SqlConn) *defaultGovLogModel {
	return &defaultGovLogModel{
		conn:  conn,
		table: "`gov_log`",
	}
}

func (m *defaultGovLogModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovLogModel) FindOne(ctx context.Context, id int64) (*GovLog, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govLogRows, m.table)
	var resp GovLog
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovLogModel) Insert(ctx context.Context, data *GovLog) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?)", m.table, govLogRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.RelatedId, data.Operation, data.Module, data.Pid, data.Username, data.RealName, data.ChgLog)
	return ret, err
}

func (m *defaultGovLogModel) Update(ctx context.Context, data *GovLog) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govLogRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.RelatedId, data.Operation, data.Module, data.Pid, data.Username, data.RealName, data.ChgLog, data.Id)
	return err
}

func (m *defaultGovLogModel) tableName() string {
	return m.table
}
