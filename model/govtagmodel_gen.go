// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govTagFieldNames          = builder.RawFieldNames(&GovTag{})
	govTagRows                = strings.Join(govTagFieldNames, ",")
	govTagRowsExpectAutoSet   = strings.Join(stringx.Remove(govTagFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), ",")
	govTagRowsWithPlaceHolder = strings.Join(stringx.Remove(govTagFieldNames, "`id`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`", "`create_time`"), "=?,") + "=?"
)

type (
	govTagModel interface {
		Insert(ctx context.Context, data *GovTag) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovTag, error)
		Update(ctx context.Context, data *GovTag) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovTagModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovTag struct {
		Id         int64          `db:"id"`
		Name       sql.NullString `db:"name"`        // 标签名
		Status     sql.NullInt64  `db:"status"`      // 状态
		CreatedAt  sql.NullTime   `db:"created_at"`  // 创建时间
		UpdatedAt  sql.NullTime   `db:"updated_at"`  // 修改时间
		Content    sql.NullString `db:"content"`     // json格式标签项目，这期先不要，下期加
		EnableEdit int64          `db:"enable_edit"` // 是否可编辑1可编辑2不可编辑
	}
)

func newGovTagModel(conn sqlx.SqlConn) *defaultGovTagModel {
	return &defaultGovTagModel{
		conn:  conn,
		table: "`gov_tag`",
	}
}

func (m *defaultGovTagModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovTagModel) FindOne(ctx context.Context, id int64) (*GovTag, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govTagRows, m.table)
	var resp GovTag
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovTagModel) Insert(ctx context.Context, data *GovTag) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, govTagRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Name, data.Status, data.Content, data.EnableEdit)
	return ret, err
}

func (m *defaultGovTagModel) Update(ctx context.Context, data *GovTag) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govTagRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.Status, data.Content, data.EnableEdit, data.Id)
	return err
}

func (m *defaultGovTagModel) tableName() string {
	return m.table
}
