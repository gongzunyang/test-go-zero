// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govPublishServiceClassifyFieldNames          = builder.RawFieldNames(&GovPublishServiceClassify{})
	govPublishServiceClassifyRows                = strings.Join(govPublishServiceClassifyFieldNames, ",")
	govPublishServiceClassifyRowsExpectAutoSet   = strings.Join(stringx.Remove(govPublishServiceClassifyFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), ",")
	govPublishServiceClassifyRowsWithPlaceHolder = strings.Join(stringx.Remove(govPublishServiceClassifyFieldNames, "`id`", "`update_time`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`"), "=?,") + "=?"
)

type (
	govPublishServiceClassifyModel interface {
		Insert(ctx context.Context, data *GovPublishServiceClassify) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovPublishServiceClassify, error)
		Update(ctx context.Context, data *GovPublishServiceClassify) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovPublishServiceClassifyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovPublishServiceClassify struct {
		Id              int64     `db:"id"`
		Type            int64     `db:"type"`              // 分类归属：1个人；2法人
		Channel         int64     `db:"channel"`           // 发布渠道：1自助机系统；2数享生活app 3全部
		AreaCode        int64     `db:"area_code"`         // 发布地区id
		PublishUseLevel int64     `db:"publish_use_level"` // 发布地区-服务等级：1省；2市；3县区；4乡镇; 5村
		ClassifyId      string    `db:"classify_id"`       // 服务分类id(二级服务分类id)
		CreatedAt       time.Time `db:"created_at"`
		UpdatedAt       time.Time `db:"updated_at"`
	}
)

func newGovPublishServiceClassifyModel(conn sqlx.SqlConn) *defaultGovPublishServiceClassifyModel {
	return &defaultGovPublishServiceClassifyModel{
		conn:  conn,
		table: "`gov_publish_service_classify`",
	}
}

func (m *defaultGovPublishServiceClassifyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovPublishServiceClassifyModel) FindOne(ctx context.Context, id int64) (*GovPublishServiceClassify, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govPublishServiceClassifyRows, m.table)
	var resp GovPublishServiceClassify
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovPublishServiceClassifyModel) Insert(ctx context.Context, data *GovPublishServiceClassify) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, govPublishServiceClassifyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Type, data.Channel, data.AreaCode, data.PublishUseLevel, data.ClassifyId)
	return ret, err
}

func (m *defaultGovPublishServiceClassifyModel) Update(ctx context.Context, data *GovPublishServiceClassify) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govPublishServiceClassifyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Type, data.Channel, data.AreaCode, data.PublishUseLevel, data.ClassifyId, data.Id)
	return err
}

func (m *defaultGovPublishServiceClassifyModel) tableName() string {
	return m.table
}
