// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govManagerClassifyFieldNames          = builder.RawFieldNames(&GovManagerClassify{})
	govManagerClassifyRows                = strings.Join(govManagerClassifyFieldNames, ",")
	govManagerClassifyRowsExpectAutoSet   = strings.Join(stringx.Remove(govManagerClassifyFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), ",")
	govManagerClassifyRowsWithPlaceHolder = strings.Join(stringx.Remove(govManagerClassifyFieldNames, "`id`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`", "`created_at`"), "=?,") + "=?"
)

type (
	govManagerClassifyModel interface {
		Insert(ctx context.Context, data *GovManagerClassify) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovManagerClassify, error)
		Update(ctx context.Context, data *GovManagerClassify) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovManagerClassifyModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovManagerClassify struct {
		Id              int64     `db:"id"`
		ClassifyName    string    `db:"classify_name"`
		ClassifyId      int64     `db:"classify_id"`
		ClassifyPidId   int64     `db:"classify_pid_id"`
		ClassifyPidName string    `db:"classify_pid_name"`
		CreatedAt       time.Time `db:"created_at"`
		UpdatedAt       time.Time `db:"updated_at"`
		ManagementId    int64     `db:"management_id"`
	}
)

func newGovManagerClassifyModel(conn sqlx.SqlConn) *defaultGovManagerClassifyModel {
	return &defaultGovManagerClassifyModel{
		conn:  conn,
		table: "`gov_manager_classify`",
	}
}

func (m *defaultGovManagerClassifyModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovManagerClassifyModel) FindOne(ctx context.Context, id int64) (*GovManagerClassify, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govManagerClassifyRows, m.table)
	var resp GovManagerClassify
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovManagerClassifyModel) Insert(ctx context.Context, data *GovManagerClassify) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, govManagerClassifyRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.ClassifyName, data.ClassifyId, data.ClassifyPidId, data.ClassifyPidName, data.ManagementId)
	return ret, err
}

func (m *defaultGovManagerClassifyModel) Update(ctx context.Context, data *GovManagerClassify) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govManagerClassifyRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.ClassifyName, data.ClassifyId, data.ClassifyPidId, data.ClassifyPidName, data.ManagementId, data.Id)
	return err
}

func (m *defaultGovManagerClassifyModel) tableName() string {
	return m.table
}
