// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govLocationFieldNames          = builder.RawFieldNames(&GovLocation{})
	govLocationRows                = strings.Join(govLocationFieldNames, ",")
	govLocationRowsExpectAutoSet   = strings.Join(stringx.Remove(govLocationFieldNames, "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	govLocationRowsWithPlaceHolder = strings.Join(stringx.Remove(govLocationFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	govLocationModel interface {
		Insert(ctx context.Context, data *GovLocation) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovLocation, error)
		Update(ctx context.Context, data *GovLocation) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovLocationModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovLocation struct {
		Id              int64          `db:"id"`
		Name            sql.NullString `db:"name"`            // 名称
		ParentId        sql.NullInt64  `db:"parentId"`        // 父级id
		Weight          sql.NullInt64  `db:"weight"`          // 权重
		Abbreviation    sql.NullString `db:"abbreviation"`    // 缩写
		CombinationName sql.NullString `db:"combinationName"` // 组合名称
		Code            sql.NullString `db:"code"`
		Sort            sql.NullInt64  `db:"sort"`
		Status          sql.NullInt64  `db:"status"`
		Level           sql.NullInt64  `db:"level"` // 级别
		Remarks         string         `db:"remarks"`
	}
)

func newGovLocationModel(conn sqlx.SqlConn) *defaultGovLocationModel {
	return &defaultGovLocationModel{
		conn:  conn,
		table: "`gov_location`",
	}
}

func (m *defaultGovLocationModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovLocationModel) FindOne(ctx context.Context, id int64) (*GovLocation, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govLocationRows, m.table)
	var resp GovLocation
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovLocationModel) Insert(ctx context.Context, data *GovLocation) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, govLocationRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Id, data.Name, data.ParentId, data.Weight, data.Abbreviation, data.CombinationName, data.Code, data.Sort, data.Status, data.Level, data.Remarks)
	return ret, err
}

func (m *defaultGovLocationModel) Update(ctx context.Context, data *GovLocation) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govLocationRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Name, data.ParentId, data.Weight, data.Abbreviation, data.CombinationName, data.Code, data.Sort, data.Status, data.Level, data.Remarks, data.Id)
	return err
}

func (m *defaultGovLocationModel) tableName() string {
	return m.table
}
