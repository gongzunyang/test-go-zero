// Code generated by goctl. DO NOT EDIT.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	govUserFieldNames          = builder.RawFieldNames(&GovUser{})
	govUserRows                = strings.Join(govUserFieldNames, ",")
	govUserRowsExpectAutoSet   = strings.Join(stringx.Remove(govUserFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), ",")
	govUserRowsWithPlaceHolder = strings.Join(stringx.Remove(govUserFieldNames, "`id`", "`create_at`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`"), "=?,") + "=?"
)

type (
	govUserModel interface {
		Insert(ctx context.Context, data *GovUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*GovUser, error)
		Update(ctx context.Context, data *GovUser) error
		Delete(ctx context.Context, id int64) error
	}

	defaultGovUserModel struct {
		conn  sqlx.SqlConn
		table string
	}

	GovUser struct {
		Id        int64          `db:"id"`
		Username  string         `db:"username"` // 姓名
		Token     string         `db:"token"`
		Phone     string         `db:"phone"` // 手机号(账号)
		CreatedAt sql.NullTime   `db:"created_at"`
		UpdatedAt sql.NullTime   `db:"updated_at"`
		LoginAt   sql.NullTime   `db:"login_at"`
		LogoutAt  sql.NullTime   `db:"logout_at"`
		Pid       sql.NullString `db:"pid"`
		RealName  string         `db:"real_name"`
		Uid       int64          `db:"uid"`
	}
)

func newGovUserModel(conn sqlx.SqlConn) *defaultGovUserModel {
	return &defaultGovUserModel{
		conn:  conn,
		table: "`gov_user`",
	}
}

func (m *defaultGovUserModel) Delete(ctx context.Context, id int64) error {
	query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, id)
	return err
}

func (m *defaultGovUserModel) FindOne(ctx context.Context, id int64) (*GovUser, error) {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", govUserRows, m.table)
	var resp GovUser
	err := m.conn.QueryRowCtx(ctx, &resp, query, id)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultGovUserModel) Insert(ctx context.Context, data *GovUser) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, govUserRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Username, data.Token, data.Phone, data.LoginAt, data.LogoutAt, data.Pid, data.RealName, data.Uid)
	return ret, err
}

func (m *defaultGovUserModel) Update(ctx context.Context, data *GovUser) error {
	query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, govUserRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Username, data.Token, data.Phone, data.LoginAt, data.LogoutAt, data.Pid, data.RealName, data.Uid, data.Id)
	return err
}

func (m *defaultGovUserModel) tableName() string {
	return m.table
}
